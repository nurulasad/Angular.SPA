using PCS.DataModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;
using System.Linq.Expressions;
using PCS.WebAPI.BusinessServices.Repositories.Interfaces;
using PCS.WebAPI.BusinessServices.Utility;

namespace PCS.ELearningWebAPI.BusinessServices.Repositories
{
    public class Repository<T> : IRepository<T> where T : EntityBase
    {

        protected readonly DbContext Context = new ELearningDbContext();
        private DbSet<T> _entities;
        private ICacheProvider _cacheProvider;

        public Repository(ICacheProvider cacheProvider)
        {
            _cacheProvider = cacheProvider;
            _entities = Context.Set<T>();

            
        }


        public T GetById(object id)
        {
           return _entities.Find(id);

        }

        public T SingleOrDefault(Expression<Func<T,bool>> filter)
        {
            return _entities.SingleOrDefault(filter);
        }

        public IEnumerable<T> Get(Expression<Func<T, bool>> filter=null, Func<IQueryable<T>,IOrderedQueryable<T>> orderBy=null, string includeProperties="")
        {
            IQueryable<T> query = _entities;

            if(filter != null)
            {
                query = query.Where(filter);
            }

            foreach(var includeProperty in includeProperties.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                query = query.Include(includeProperty);
            }

            if(orderBy !=null)
            {
                return orderBy(query).ToList();
            }
            else
            {
                return query.ToList();
            }
        }

      
        public void Add(T t)
        {
         
            var key = Utility.Utility.GenerateKey<T>();
            _cacheProvider.Invalidate(key);

            _entities.Add(t);
        }
       

        public void Update(T entityToUpdate)
        {
            var key = Utility.Utility.GenerateKey<T>();
            _cacheProvider.Invalidate(key);

            _entities.Attach(entityToUpdate);
            Context.Entry(entityToUpdate).State = EntityState.Modified;
        }

        public void Delete(T t)
        {
            var key = Utility.Utility.GenerateKey<T>();
            _cacheProvider.Invalidate(key);

            _entities.Remove(t);
        }

       
    }
}
